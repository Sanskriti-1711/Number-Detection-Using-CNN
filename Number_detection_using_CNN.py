# -*- coding: utf-8 -*-
"""mnist hand written rec.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c5nwLKp7Eqj3dc7KzNJWSRiiRaaV6kUs
"""

from keras.datasets import mnist

dataset = mnist.load_data('mnist.db')

len(dataset)

train , test = dataset

len(train)

X_train , y_train = train

X_test, y_test = test

len(X_train)

len(X_test)

X_train[0].shape

X_train.shape

import matplotlib.pyplot as plt

img = X_train[2]

img = X_train[2]
plt.imshow(img , cmap='gray')

y_train

img.shape

type(img)

img_1d = img.reshape(28 * 28)

img_1d.shape

img_1d

X_train.shape

X_train_1d = X_train.reshape(-1,   28*28)

X_train_1d

X_test_1d = X_test.reshape(-1,   28*28)

X_test_1d.shape

X_train_1d

X_train_1d_f = X_train_1d.astype('float32')

X_train_1d_f

X_test_1d_f = X_test_1d.astype('float32')

from keras.utils.np_utils import to_categorical

y_train.shape

y_train

y_train_cat = to_categorical(y_train)

img = X_train[300]
plt.imshow(img , cmap='gray')

y_train[300]

y_train_cat[300]

from keras.models import Sequential

model  = Sequential()

from keras.layers import Dense

model.add(
    Dense( units=512 , input_dim=28*28 , activation='relu')
)

model.summary()

model.add(
    Dense( units=256 , activation='relu')
)

model.add(
    Dense( units=128 , activation='relu')
)

model.add(
    Dense( units=64 , activation='relu')
)

model.add(
    Dense( units=10 , activation='softmax')
)

model.summary()

from keras.optimizers import RMSprop

model.compile(
            optimizer=RMSprop() , 
            loss='categorical_crossentropy',
            metrics=['accuracy']
             )

model.fit( X_train_1d_f , y_train_cat , epochs=10)

img_test = X_test[12]

plt.imshow(img_test)

img_test.shape

img_test_1d = img_test.reshape(1 , 28*28)

img_test_1d.shape



model.predict(img_test_1d)

import keras.backend as k
k.clear_session()